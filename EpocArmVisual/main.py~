#!/bin/sh

import sys
from GUI import GUI
from PyQt4.QtGui import QApplication, QDialog, QTabWidget, QMainWindow, QColor
from GUI.GUI import Ui_MainWindow # here you need to correct the names
from pyqtgraph.Qt import QtGui, QtCore
import numpy as np
import pyqtgraph as pg
from emokit.emotiv import Emotiv
import gevent
from threading import Thread
from pyqtgraph.ptime import time
from PyQt4.QtCore import QObject, pyqtSignal, pyqtSlot
from ColorChanger.changecolors import ColorBatt, ColorChannelQuality
from GyroDeflect.Gyrodef import GyroDeflection

class LinkingPath(QObject):
      patcher_Battery = pyqtSignal(int)
      patcher_Gyros = pyqtSignal(int, int)
      patcher_Quality = pyqtSignal(int, int, int, int, 
                                   int, int, int, int)
      def __init__(self):
          QObject.__init__(self)
      def patch_Battery(self, data):
          self.patcher_Battery.emit(data)  
      def patch_Quality(self, data1, data2, data3, data4, 
                              data5, data6, data7, data8):
          self.patcher_Quality.emit(data1, data2, data3, data4, 
                                    data5, data6, data7, data8) 
      def patch_Gyros(self, data1, data2):
          self.patcher_Gyros.emit(data1, data2)   

class MainWindow(QMainWindow, Ui_MainWindow):

    def __init__(self):
        super(MainWindow, self).__init__()
        QTabWidget.__init__(self)
        self.setupUi(self)
        sld  = self.push_Iniciar
        sld2 = self.push_Finalizar
        sld3 = self.push_Salir
        sld.clicked.connect(self.test_Iniciar)
        sld2.clicked.connect(self.Terminado)
        sld3.clicked.connect(self.Salida)
        self.linking = LinkingPath()
        self.linking.patcher_Battery.connect(self.print_Battery)
        self.linking.patcher_Gyros.connect(self.print_Gyros)
        self.linking.patcher_Quality.connect(self.print_Quality)

    def ColorUpdate():
        pal = self.progressBar_Bat
        palette = QtGui.QPalette()
        palette.setColor(QtGui.QPalette.Highlight, QtGui.QColor(QtCore.Qt.black))
        pal.setPalette(palette)

    def Terminado(self):
        self.continuidad = False

    def Salida(self):  
        QtCore.QCoreApplication.instance().quit()

    def print_Battery(self, BattValue):
        if 0 < BattValue < 100:
           self.progressBar_Bat.setValue(BattValue)
           ColorBatt(self, BattValue)

    def print_Quality(self, CH1, CH2, CH3, CH4, 
                            CH5, CH6, CH7, CH8):
        self.progressBar_CH1.setValue(CH1)
        self.progressBar_CH2.setValue(CH2)
        self.progressBar_CH3.setValue(CH3)
        self.progressBar_CH4.setValue(CH4)
        self.progressBar_CH5.setValue(CH5)
        self.progressBar_CH6.setValue(CH6)
        self.progressBar_CH7.setValue(CH7)
        self.progressBar_CH8.setValue(CH8)
        ColorChannelQuality(self, CH1, CH2, CH3, CH4, CH5, CH6, CH7, CH8)

    def print_Gyros(self, GyroY, GyroX):
        self.label_GyroX.setNum(GyroX)
        self.label_GyroY.setNum(GyroY)
        GyroDeflection(self, GyroX, GyroY)


    def test_Iniciar(self):
        self.continuidad = True
        threads = []
        cycle1 = Thread(target = self.update_battery)
        cycle2 = Thread(target = self.update_Quality)
        cycle3 = Thread(target = self.update_Gyros)
        threads.append(cycle1)
        threads.append(cycle2)
        threads.append(cycle3)
        cycle1.start()
        cycle2.start()
        cycle3.start()
        gevent.sleep(1)

    def update_battery(self):
        headset = Emotiv()
        gevent.spawn(headset.setup)
        try:
            while self.continuidad:      
                  packet = headset.dequeue()
                  BattValue = packet.battery
                  self.linking.patch_Battery(BattValue)
        finally:
            headset.close()

    def update_Quality(self):
        headset = Emotiv()
        gevent.spawn(headset.setup)
        try:
            while self.continuidad:
                  packet = headset.dequeue()
                  CH1 = packet.sensors['AF3']
                  CH2 = packet.sensors['AF4']
                  CH3 = packet.sensors['F3']
                  CH4 = packet.sensors['F4']
                  CH5 = packet.sensors['F7']
                  CH6 = packet.sensors['F8']
                  CH7 = packet.sensors['FC5']
                  CH8 = packet.sensors['FC6']
                  self.linking.patch_Quality(
                       CH1['quality'], CH2['quality'], 
                       CH3['quality'], CH4['quality'], 
                       CH5['quality'], CH6['quality'], 
                       CH7['quality'], CH8['quality'])
        finally:
            headset.close()     

    def update_Gyros(self):
        headset = Emotiv()
        gevent.spawn(headset.setup)
        try:
            while self.continuidad:
                  packet = headset.dequeue()
                  GyroY = packet.gyro_y
                  GyroX = packet.gyro_x
                  self.linking.patch_Gyros(GyroY, GyroX)
        finally:
            headset.close() 

def main():
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec_())

if __name__ == '__main__':
    main()
